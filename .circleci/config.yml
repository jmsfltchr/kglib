version: 2.1
commands:

  install-bazel:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/vaticle/dependencies/master/tool/bazelinstall/linux.sh
      - run: bash ./linux.sh && rm ./linux.sh
      - run: curl -OL https://raw.githubusercontent.com/vaticle/dependencies/master/tool/bazelinstall/rbe.sh
      - run: bash ./rbe.sh && rm ./rbe.sh

  run-bazel:
    parameters:
      command:
        type: string
    steps:
      - run: bazel run @vaticle_dependencies//tool/bazelrun:rbe -- << parameters.command >>

  run-grakn:
    steps:
      - run-bazel:
          command: bazel run //:grakn-extractor -- dist/grakn-core-all-linux
      - run: nohup ./dist/grakn-core-all-linux/grakn server start

  install-python:
    steps:
      - run: pyenv install 3.6.3
      - run: pyenv global 3.6.3
      - run: sudo unlink /usr/bin/python3
      - run: sudo ln -s $(which python3) /usr/bin/python3
      - run: sudo sed -i -e 's|python3|python|g' $(which lsb_release)
      - run: sudo sed -i -e '/from optparse import OptionParser/ i from __future__ import print_function' $(which lsb_release)

jobs:
  build:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run-bazel:
          command: bazel build //...

  test:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run-bazel:
          command: bazel test //kglib/... --test_output=streamed --spawn_strategy=standalone

  test-end-to-end:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run: bazel test //tests/end_to_end/... --test_output=streamed --spawn_strategy=standalone

  test-markdown-link-health:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - checkout
      - run: find . -name \*.md | xargs -L1 npx markdown-link-check@3.8.0 -v

  deploy-pip-snapshot:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(git rev-parse HEAD) //:deploy-pip -- snapshot

  test-deployment-pip:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run-grakn
      - run:
          name: Run test-deployment-pip for kglib
          command: |
            echo -n "0.0.0-$CIRCLE_SHA1" > VERSION
            sed -i -e "s/KGLIB_VERSION_MARKER/$(cat VERSION)/g" tests/deployment/requirements.txt
            cat tests/deployment/requirements.txt
            pip install -U pip setuptools
            pip install -r tests/deployment/requirements.txt
            ./dist/grakn-core-all-linux/grakn console -k diagnosis -f kglib/utils/grakn/synthetic/examples/diagnosis/schema.gql
            cd tests/deployment/ && python -m unittest kgcn.diagnosis

  release-approval:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @vaticle_dependencies//tool/release:approval

  release-validate:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - install-bazel
      - checkout
      - install-python
      - run: |
          bazel test //:release-validate-deps --test_output=streamed

  deploy-github:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - checkout
      - run: wget https://github.com/tcnksm/ghr/releases/download/v0.12.0/ghr_v0.12.0_linux_386.tar.gz
      - run: tar xvf ghr_v0.12.0_linux_386.tar.gz
      - run:
          name: "Publish Draft Release on GitHub"
          command: |
            VERSION_TAG=$(cat "VERSION")
            curl -X POST --fail --data "{\"tag_name\": \"${VERSION_TAG}\",\"target_commitish\": \"${CIRCLE_SHA1}\",
            \"name\": \"KGLIB ${VERSION_TAG}\",\"body\": \"\",\"draft\": true,\"prerelease\": false}" https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases?access_token=${GITHUB_DEPLOYMENT_TOKEN}

  deploy-pip-release:
    machine:
      image: ubuntu-1604:201903-01
    working_directory: ~/kglib
    steps:
      - install-bazel
      - checkout
      - install-python
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_PYPI_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_PYPI_PASSWORD
          bazel run --define version=$(cat VERSION) //:deploy-pip -- release

  release-cleanup:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: git push --delete https://$REPO_GITHUB_TOKEN@github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME $CIRCLE_BRANCH

workflows:
  version: 2
  kglib:
    jobs:
      - test:
          filters:
            branches:
              ignore: kglib-release-branch
      - build:
          filters:
            branches:
              ignore: kglib-release-branch
      - test-end-to-end:
          filters:
            branches:
              ignore: kglib-release-branch
      - test-markdown-link-health:
          filters:
            branches:
              ignore: kglib-release-branch
      - deploy-pip-snapshot:
          filters:
            branches:
              only:
                - master
                - development
          requires:
            - test
            - test-end-to-end
            - build
            - test-markdown-link-health
      - test-deployment-pip:
          filters:
            branches:
              only:
                - master
                - development
          requires:
            - deploy-pip-snapshot
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - test-deployment-pip

  kglib-release:
    jobs:
      - release-validate:
          filters:
            branches:
              only: kglib-release-branch
      - deploy-github:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - release-validate
      - deploy-approval:
          type: approval
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-github
      - deploy-pip-release:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-approval
      - release-cleanup:
          filters:
            branches:
              only: kglib-release-branch
          requires:
            - deploy-pip-release
